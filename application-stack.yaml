AWSTemplateFormatVersion: "2010-09-09"
Description: Web Application Stack

Parameters:

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.192.0.0/16
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet 1
    Type: String
    Default: 10.192.10.0/24
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet 2
    Type: String
    Default: 10.192.20.0/24
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'

  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the Private subnet 1
    Type: String
    Default: 10.192.30.0/24
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'

  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the Private subnet 2
    Type: String
    Default: 10.192.40.0/24
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'

  InstanceKeyPair:
    Type: AWS::EC2::KeyPair::KeyName

  InstanceImageId:
    Default: ami-0fc61db8544a617ed
    Type: AWS::EC2::Image::Id

  InstanceType: 
    Default: t2.micro
    Description: "The name of the compute and memory capacity class of the instance."
    Type: String

Resources:

  AppStackVPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: "default"
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-vpc'

  PublicSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      VpcId: !Ref AppStackVPC
      Tags:
      - Key: Name
        Value:  !Sub '${AWS::StackName}-pub-sub1'

  PublicSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      VpcId: !Ref AppStackVPC
      Tags:
      - Key: Name
        Value:  !Sub '${AWS::StackName}-pub-sub2'

  PrivateSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: true
      VpcId: !Ref AppStackVPC
      Tags:
      - Key: Name
        Value:  !Sub '${AWS::StackName}-private-sub1'

  PrivateSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: true
      VpcId: !Ref AppStackVPC
      Tags:
      - Key: Name
        Value:  !Sub '${AWS::StackName}-private-sub2'

  IGWPublic:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-igw'

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref AppStackVPC
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-pub-rt'

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref AppStackVPC
      InternetGatewayId:
        Ref: IGWPublic

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGWPublic

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable


  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host
      VpcId: !Ref AppStackVPC
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-public-web-sg'
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0

  LBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host
      VpcId: !Ref AppStackVPC
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-public-lb-sg'
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0

  InboundRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      SourceSecurityGroupId:
        Fn::GetAtt:
        - LBSecurityGroup
        - GroupId
      GroupId:
        Fn::GetAtt:
        - InstanceSecurityGroup
        - GroupId

  ElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      SecurityGroups:
      - Ref: InstanceSecurityGroup
      Listeners:
      - LoadBalancerPort: '80'
        InstancePort: '80'
        Protocol: HTTP
      HealthCheck:
        Target: HTTP:80/index.html
        HealthyThreshold: '3'
        UnhealthyThreshold: '5'
        Interval: '30'
        Timeout: '5'
      Subnets:
      - Ref: PublicSubnet1
      - Ref: PublicSubnet2
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-public-web-elb'

  WebServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Ref: PublicSubnet1
      - Ref: PublicSubnet2
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: '1'
      MaxSize: '1'
      LoadBalancerNames: [!Ref 'ElasticLoadBalancer']

  # Auto ScalingUp Policy - Basic Setup
  WebServerGroupScaleUpPolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AdjustmentType: "ChangeInCapacity"
      AutoScalingGroupName:
        Ref: "WebServerGroup"
      Cooldown: '300'
      ScalingAdjustment: '1'

  # Auto ScalingDown Policy - Basic Setup
  WebServerGroupScaleDownPolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AdjustmentType: "ChangeInCapacity"
      AutoScalingGroupName:
        Ref: "WebServerGroup"
      Cooldown: '300'
      ScalingAdjustment: '-1'

  # Auto Scaling Launch Configuration
  LaunchConfiguration:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Properties:
      AssociatePublicIpAddress: true
      KeyName: !Ref InstanceKeyPair
      ImageId: !Ref InstanceImageId
      InstanceType: !Ref InstanceType
      SecurityGroups: 
        - !Ref InstanceSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          
          yum install -y httpd php php-mysql mysql-server git
          systemctl start httpd
          groupadd www
          usermod -a -G www ec2-user

          chown -R root:www /var/www
          chmod 2775 /var/www
          find /var/www -type d -exec chmod 2775 {} +
          find /var/www -type f -exec chmod 0664 {} +
          host_name=$(hostname)

          git clone https://github.com/rolindroy/testwebapp.git 
          mv testwebapp/* /var/www/html/
          sed -i "s/HOSTNAME/$host_name/g" /var/www/html/index.html
          
